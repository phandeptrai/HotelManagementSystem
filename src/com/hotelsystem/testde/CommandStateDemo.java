package com.hotelsystem.testde;

import com.hotelsystem.room.Room;
import com.hotelsystem.room.SingleRoom;
import com.hotelsystem.user.User;
import com.hotelsystem.command.room.*;
import com.hotelsystem.services.RoomMockData;
import com.hotelsystem.services.UserMockData;

public class CommandStateDemo {
    
    public static void main(String[] args) {
        System.out.println("=== DEMO COMMAND PATTERN V·ªöI STATE PATTERN ===");
        
        // Kh·ªüi t·∫°o d·ªØ li·ªáu
        Room room = new SingleRoom("Demo001");
        User user = new User(1, "Nguy·ªÖn VƒÉn Demo", "0123456789", "demo@email.com");
        
        // T·∫°o invoker
        ReservationInvoker invoker = new ReservationInvoker();
        
        System.out.println("üè® Ph√≤ng ban ƒë·∫ßu: " + room.getDescription());
        System.out.println("üë§ Kh√°ch h√†ng: " + user.getName());
        System.out.println();
        
        // Demo 1: ƒê·∫∑t ph√≤ng
        System.out.println("=== DEMO 1: ƒê·∫∂T PH√íNG ===");
        ReserveRoomCommand reserveCommand = new ReserveRoomCommand(room, user);
        invoker.executeCommand(reserveCommand);
        System.out.println("Tr·∫°ng th√°i sau ƒë·∫∑t ph√≤ng: " + room.getCurrentState().getStateName());
        System.out.println();
        
        // Demo 2: Check-in
        System.out.println("=== DEMO 2: CHECK-IN ===");
        CheckInCommand checkInCommand = new CheckInCommand(room, user);
        invoker.executeCommand(checkInCommand);
        System.out.println("Tr·∫°ng th√°i sau check-in: " + room.getCurrentState().getStateName());
        System.out.println();
        
        // Demo 3: Check-out
        System.out.println("=== DEMO 3: CHECK-OUT ===");
        CheckOutCommand checkOutCommand = new CheckOutCommand(room, user);
        invoker.executeCommand(checkOutCommand);
        System.out.println("Tr·∫°ng th√°i sau check-out: " + room.getCurrentState().getStateName());
        System.out.println();
        
        // Demo 4: B·∫£o tr√¨
        System.out.println("=== DEMO 4: B·∫¢O TR√å ===");
        MaintenanceCommand maintenanceCommand = new MaintenanceCommand(room, user, true);
        invoker.executeCommand(maintenanceCommand);
        System.out.println("Tr·∫°ng th√°i sau b·∫£o tr√¨: " + room.getCurrentState().getStateName());
        System.out.println();
        
        // Demo 5: K·∫øt th√∫c b·∫£o tr√¨
        System.out.println("=== DEMO 5: K·∫æT TH√öC B·∫¢O TR√å ===");
        MaintenanceCommand finishMaintenanceCommand = new MaintenanceCommand(room, user, false);
        invoker.executeCommand(finishMaintenanceCommand);
        System.out.println("Tr·∫°ng th√°i sau k·∫øt th√∫c b·∫£o tr√¨: " + room.getCurrentState().getStateName());
        System.out.println();
        
        // Demo 6: Hi·ªÉn th·ªã l·ªãch s·ª≠ l·ªánh
        System.out.println("=== DEMO 6: L·ªäCH S·ª¨ L·ªÜNH ===");
        invoker.showCommandHistory();
        System.out.println();
        
        // Demo 7: Undo c√°c l·ªánh
        System.out.println("=== DEMO 7: HO√ÄN T√ÅC L·ªÜNH ===");
        System.out.println("Ho√†n t√°c l·ªánh cu·ªëi c√πng...");
        invoker.undo();
        System.out.println("Tr·∫°ng th√°i sau ho√†n t√°c: " + room.getCurrentState().getStateName());
        System.out.println();
        
        System.out.println("Ho√†n t√°c l·ªánh th·ª© 2...");
        invoker.undo();
        System.out.println("Tr·∫°ng th√°i sau ho√†n t√°c: " + room.getCurrentState().getStateName());
        System.out.println();
        
        // Demo 8: Redo c√°c l·ªánh
        System.out.println("=== DEMO 8: L√ÄM L·∫†I L·ªÜNH ===");
        System.out.println("L√†m l·∫°i l·ªánh...");
        invoker.redo();
        System.out.println("Tr·∫°ng th√°i sau l√†m l·∫°i: " + room.getCurrentState().getStateName());
        System.out.println();
        
        // Demo 9: Hi·ªÉn th·ªã l·ªãch s·ª≠ ho√†n t√°c
        System.out.println("=== DEMO 9: L·ªäCH S·ª¨ HO√ÄN T√ÅC ===");
        invoker.showUndoHistory();
        System.out.println();
        
        // Demo 10: Test v·ªõi nhi·ªÅu kh√°ch h√†ng
        System.out.println("=== DEMO 10: TEST V·ªöI NHI·ªÄU KH√ÅCH H√ÄNG ===");
        User user2 = new User(2, "Tr·∫ßn Th·ªã Demo", "0987654321", "demo2@email.com");
        
        ReserveRoomCommand reserveCommand2 = new ReserveRoomCommand(room, user2);
        invoker.executeCommand(reserveCommand2);
        System.out.println("ƒê·∫∑t ph√≤ng cho kh√°ch th·ª© 2: " + user2.getName());
        System.out.println("Tr·∫°ng th√°i: " + room.getCurrentState().getStateName());
        System.out.println();
        
        // Demo 11: H·ªßy ƒë·∫∑t ph√≤ng
        System.out.println("=== DEMO 11: H·ª¶Y ƒê·∫∂T PH√íNG ===");
        CancelReservationCommand cancelCommand = new CancelReservationCommand(room, user2);
        invoker.executeCommand(cancelCommand);
        System.out.println("Tr·∫°ng th√°i sau h·ªßy ƒë·∫∑t ph√≤ng: " + room.getCurrentState().getStateName());
        System.out.println();
        
        // Demo 12: Th·ªëng k√™ cu·ªëi c√πng
        System.out.println("=== DEMO 12: TH·ªêNG K√ä CU·ªêI C√ôNG ===");
        System.out.println("T·ªïng s·ªë l·ªánh ƒë√£ th·ª±c hi·ªán: " + invoker.getCommandCount());
        System.out.println("S·ªë l·ªánh c√≥ th·ªÉ l√†m l·∫°i: " + invoker.getUndoCount());
        System.out.println("Tr·∫°ng th√°i ph√≤ng cu·ªëi: " + room.getCurrentState().getStateName());
        System.out.println("Kh√°ch hi·ªán t·∫°i: " + (room.getCurrentUser() != null ? room.getCurrentUser().getName() : "Kh√¥ng c√≥"));
        
        System.out.println("\n=== DEMO HO√ÄN TH√ÄNH ===");
    }
} 