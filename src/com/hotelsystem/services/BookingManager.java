package com.hotelsystem.services;

import com.hotelsystem.room.Room;
import com.hotelsystem.room.RoomInfo;
import com.hotelsystem.user.User;
import com.hotelsystem.user.UserHistory;
import com.hotelsystem.command.room.*;
import com.hotelsystem.services.strategy.*;
import com.hotelsystem.builder.*;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

public class BookingManager {
    private static BookingManager instance;
    private final List<UserHistory> bookings;
    private final ReservationInvoker invoker;

    private BookingManager() {
        bookings = new ArrayList<>();
        invoker = new ReservationInvoker();
    }

    public static BookingManager getInstance() {
        if (instance == null) {
            instance = new BookingManager();
        }
        return instance;
    }

    // ƒê·∫∑t ph√≤ng (check-in t·ª´ tr·∫°ng th√°i Available)
    public boolean bookRoom(Room room, User user) {
        // Ki·ªÉm tra tr·∫°ng th√°i ph√≤ng tr∆∞·ªõc
        String roomState = room.getCurrentState().getStateName();
        if (!roomState.equals("Available")) {
            System.out.println("‚ùå Ph√≤ng " + room.getRoomNumber() + " kh√¥ng kh·∫£ d·ª•ng! Tr·∫°ng th√°i: " + roomState);
            return false;
        }

        // S·ª≠ d·ª•ng Command pattern
        CheckInCommand checkInCommand = new CheckInCommand(room, user);
        invoker.executeCommand(checkInCommand);
        
        // T·∫°o l·ªãch s·ª≠ v·ªõi th·ªùi gian check-in (ƒë·∫∑t ph√≤ng v√† check-in c√πng l√∫c)
        UserHistory history = new UserHistory(
            user.getId(),
            room.getRoomNumber(),
            LocalDateTime.now(), // Th·ªùi gian ƒë·∫∑t ph√≤ng (c√πng l√∫c v·ªõi check-in)
            LocalDateTime.now(), // Th·ªùi gian check-in
            null,               // Th·ªùi gian check-out (ch∆∞a c√≥)
            room.getCost()
        );
        bookings.add(history);
        System.out.println("‚úÖ ƒê√£ ƒë·∫∑t ph√≤ng v√† check-in " + room.getRoomNumber() + " cho " + user.getName());
        return true;
    }
    
    // Check-in ph√≤ng ƒë√£ ƒë·∫∑t (t·ª´ tr·∫°ng th√°i Reserved)
    public boolean checkInReservedRoom(Room room, User user) {
        if (!room.getCurrentState().getStateName().equals("Reserved")) {
            System.out.println("‚ùå Ph√≤ng kh√¥ng ·ªü tr·∫°ng th√°i ƒë√£ ƒë·∫∑t!");
            return false;
        }

        // S·ª≠ d·ª•ng Command pattern
        CheckInCommand checkInCommand = new CheckInCommand(room, user);
        invoker.executeCommand(checkInCommand);
        
        // C·∫≠p nh·∫≠t l·ªãch s·ª≠ booking - t√¨m booking ƒë√£ ƒë·∫∑t v√† c·∫≠p nh·∫≠t th·ªùi gian check-in
        boolean found = false;
        for (UserHistory history : bookings) {
            if (history.getUserId() == user.getId()
                && history.getRoomNumber().equals(room.getRoomNumber())
                && history.getCheckOutTime() == null
                && history.getCheckInTime() == null) { // Ch·ªâ c·∫≠p nh·∫≠t n·∫øu ch∆∞a check-in
                history.setCheckInTime(LocalDateTime.now());
                found = true;
                System.out.println("‚úÖ ƒê√£ c·∫≠p nh·∫≠t th·ªùi gian check-in cho booking ƒë√£ ƒë·∫∑t");
                break;
            }
        }
        
        if (!found) {
            System.out.println("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y booking ƒë·ªÉ c·∫≠p nh·∫≠t check-in");
        }
        
        System.out.println("‚úÖ ƒê√£ check-in ph√≤ng " + room.getRoomNumber() + " cho " + user.getName());
        return true;
    }

    // Tr·∫£ ph√≤ng (check-out)
    public void checkOut(Room room, User user) {
        // S·ª≠ d·ª•ng Command pattern
        CheckOutCommand checkOutCommand = new CheckOutCommand(room, user);
        invoker.executeCommand(checkOutCommand);
        
        // C·∫≠p nh·∫≠t l·ªãch s·ª≠ booking - t√¨m booking ƒë√£ check-in
        for (UserHistory history : bookings) {
            if (history.getUserId() == user.getId()
                && history.getRoomNumber().equals(room.getRoomNumber())
                && history.getCheckInTime() != null  // ƒê√£ check-in
                && history.getCheckOutTime() == null) { // Ch∆∞a check-out

                history.setCheckOutTime(LocalDateTime.now());
                System.out.println("üèÅ " + user.getName() + " ƒë√£ tr·∫£ ph√≤ng " + room.getRoomNumber());
                return;
            }
        }
        System.out.println("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y l·ªãch s·ª≠ check-in ƒë·ªÉ check-out.");
    }
    
    // Tr·∫£ ph√≤ng v·ªõi thanh to√°n
    public boolean checkOutWithPayment(Room room, User user, double amount, PaymentStrategy paymentStrategy) {
        // Th·ª±c hi·ªán thanh to√°n
        if (paymentStrategy.pay(amount)) {
            // Sau khi thanh to√°n th√†nh c√¥ng, th·ª±c hi·ªán checkout
            checkOut(room, user);
            
            // T·∫°o h√≥a ƒë∆°n
            RoomInfo roomInfo = new RoomInfo(room, true);
            BillService billService = new BillService();
            billService.createBill(roomInfo, amount, paymentStrategy.getPaymentMethodName());
            
            return true;
        } else {
            System.out.println("‚ùå Thanh to√°n th·∫•t b·∫°i! Kh√¥ng th·ªÉ checkout.");
            return false;
        }
    }
    
    private boolean processPayment(double amount, String paymentMethod) {
        PaymentStrategy paymentStrategy = getPaymentStrategy(paymentMethod);
        return paymentStrategy.pay(amount);
    }
    
    private PaymentStrategy getPaymentStrategy(String method) {
        switch (method) {
            case "Ti·ªÅn m·∫∑t": return new CashPayment();
            case "Th·∫ª t√≠n d·ª•ng": return new CreditCardPayment();
            case "Chuy·ªÉn kho·∫£n": return new BankTransferPayment();
            default: return new CashPayment();
        }
    }

    // L·∫•y danh s√°ch booking hi·ªán t·∫°i
    public List<UserHistory> getBookings() {
        return bookings;
    }

    // In danh s√°ch t·∫•t c·∫£ booking
    public void displayBookings() {
        System.out.println("\n=== DANH S√ÅCH BOOKING ===");
        for (UserHistory history : bookings) {
            System.out.println("UserID: " + history.getUserId() +
                               ", Room: " + history.getRoomNumber() +
                               ", ƒê·∫∑t ph√≤ng: " + (history.getReservationTime() != null ? history.getReservationTime() : "N/A") +
                               ", Check-in: " + (history.getCheckInTime() != null ? history.getCheckInTime() : "Ch∆∞a check-in") +
                               ", Check-out: " + (history.getCheckOutTime() != null ? history.getCheckOutTime() : "Ch∆∞a tr·∫£"));
        }
    }
    
    // ========== COMMAND PATTERN METHODS ==========
    
    // ƒê·∫∑t ph√≤ng (reserve)
    public boolean reserveRoom(Room room, User user) {
        // Ki·ªÉm tra tr·∫°ng th√°i ph√≤ng tr∆∞·ªõc
        String roomState = room.getCurrentState().getStateName();
        if (!roomState.equals("Available")) {
            System.out.println("‚ùå Ph√≤ng " + room.getRoomNumber() + " kh√¥ng kh·∫£ d·ª•ng! Tr·∫°ng th√°i: " + roomState);
            return false;
        }

        // S·ª≠ d·ª•ng Command pattern
        ReserveRoomCommand reserveCommand = new ReserveRoomCommand(room, user);
        invoker.executeCommand(reserveCommand);
        
        // T·∫°o l·ªãch s·ª≠ v·ªõi th·ªùi gian ƒë·∫∑t ph√≤ng
        UserHistory history = new UserHistory(
            user.getId(),
            room.getRoomNumber(),
            LocalDateTime.now(), // Th·ªùi gian ƒë·∫∑t ph√≤ng
            null,               // Th·ªùi gian check-in (ch∆∞a c√≥)
            null,               // Th·ªùi gian check-out (ch∆∞a c√≥)
            room.getCost()
        );
        bookings.add(history);
        System.out.println("‚úÖ ƒê√£ ƒë·∫∑t ph√≤ng " + room.getRoomNumber() + " cho " + user.getName());
        return true;
    }
    
    // H·ªßy ƒë·∫∑t ph√≤ng
    public boolean cancelReservation(Room room, User user) {
        // Ki·ªÉm tra tr·∫°ng th√°i ph√≤ng tr∆∞·ªõc
        String roomState = room.getCurrentState().getStateName();
        if (roomState.equals("Occupied")) {
            System.out.println("‚ùå Ph√≤ng " + room.getRoomNumber() + " ƒëang c√≥ kh√°ch, kh√¥ng th·ªÉ h·ªßy ƒë·∫∑t ph√≤ng!");
            return false;
        }
        
        if (roomState.equals("Available")) {
            System.out.println("‚ùå Ph√≤ng " + room.getRoomNumber() + " ch∆∞a ƒë∆∞·ª£c ƒë·∫∑t, kh√¥ng th·ªÉ h·ªßy!");
            return false;
        }
        
        // Ch·ªâ h·ªßy khi ph√≤ng ·ªü tr·∫°ng th√°i Reserved
        if (roomState.equals("Reserved")) {
            // S·ª≠ d·ª•ng Command pattern
            CancelReservationCommand cancelCommand = new CancelReservationCommand(room, user);
            invoker.executeCommand(cancelCommand);
            
            // X√≥a booking kh·ªèi danh s√°ch - ch·ªâ x√≥a nh·ªØng booking ch∆∞a check-in
            bookings.removeIf(history -> 
                history.getUserId() == user.getId() && 
                history.getRoomNumber().equals(room.getRoomNumber()) &&
                history.getCheckInTime() == null &&  // Ch∆∞a check-in
                history.getCheckOutTime() == null    // Ch∆∞a check-out
            );
            
            System.out.println("‚úÖ ƒê√£ h·ªßy ƒë·∫∑t ph√≤ng " + room.getRoomNumber() + " cho " + user.getName());
            return true;
        }
        
        System.out.println("‚ùå Kh√¥ng th·ªÉ h·ªßy ƒë·∫∑t ph√≤ng ·ªü tr·∫°ng th√°i: " + roomState);
        return false;
    }
    
    // B·∫Øt ƒë·∫ßu b·∫£o tr√¨
    public void startMaintenance(Room room, User user) {
        // S·ª≠ d·ª•ng Command pattern
        MaintenanceCommand maintenanceCommand = new MaintenanceCommand(room, user, true);
        invoker.executeCommand(maintenanceCommand);
        System.out.println("üîß ƒê√£ b·∫Øt ƒë·∫ßu b·∫£o tr√¨ ph√≤ng " + room.getRoomNumber());
    }
    
    // K·∫øt th√∫c b·∫£o tr√¨
    public void finishMaintenance(Room room, User user) {
        // S·ª≠ d·ª•ng Command pattern
        MaintenanceCommand maintenanceCommand = new MaintenanceCommand(room, user, false);
        invoker.executeCommand(maintenanceCommand);
        System.out.println("‚úÖ ƒê√£ k·∫øt th√∫c b·∫£o tr√¨ ph√≤ng " + room.getRoomNumber());
    }
    
    // ========== UNDO/REDO METHODS ==========
    
    // Ho√†n t√°c l·ªánh cu·ªëi c√πng
    public void undoLastCommand() {
        invoker.undo();
    }
    
    // L√†m l·∫°i l·ªánh cu·ªëi c√πng
    public void redoLastCommand() {
        invoker.redo();
    }
    
    // Hi·ªÉn th·ªã l·ªãch s·ª≠ l·ªánh
    public void showCommandHistory() {
        invoker.showCommandHistory();
    }
    
    // Hi·ªÉn th·ªã l·ªãch s·ª≠ ho√†n t√°c
    public void showUndoHistory() {
        invoker.showUndoHistory();
    }
    
    // X√≥a l·ªãch s·ª≠ l·ªánh
    public void clearCommandHistory() {
        invoker.clearHistory();
    }
    
    // L·∫•y s·ªë l∆∞·ª£ng l·ªánh ƒë√£ th·ª±c hi·ªán
    public int getCommandCount() {
        return invoker.getCommandCount();
    }
    
    // L·∫•y s·ªë l∆∞·ª£ng l·ªánh c√≥ th·ªÉ l√†m l·∫°i
    public int getUndoCount() {
        return invoker.getUndoCount();
    }
    
    // Ki·ªÉm tra c√≥ l·ªánh ƒë·ªÉ ho√†n t√°c kh√¥ng
    public boolean hasCommandsToUndo() {
        return invoker.hasCommands();
    }
    
    // Ki·ªÉm tra c√≥ l·ªánh ƒë·ªÉ l√†m l·∫°i kh√¥ng
    public boolean hasCommandsToRedo() {
        return invoker.hasUndoCommands();
    }
}
